generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int         @id @default(autoincrement())
  name      String
  email     String      @unique
  password  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  logs      TravelLog[]
  badges    UserBadge[]
  
  sentFriendRequests     Friendship[] @relation("SentFriendRequests")
  receivedFriendRequests Friendship[] @relation("ReceivedFriendRequests")
  
  comments  Comment[]
  reactions Reaction[]
}


model UserBadge {
  id        Int      @id @default(autoincrement())
  userId    Int
  badgeName String   @default("")
  earnedAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeName])
}

model TravelLog {
  id          Int      @id @default(autoincrement())
  userId      Int
  yearVisited Int      // Back to regular Int type
  title       String   // Added title field for the story title
  story       String   @db.Text // Long text for the travel story
  image       String   // URL or image path (image stored in supabase bucket gives a link)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

   comments        Comment[]
   reactions      Reaction[]
}

model Comment {
  id          String    @id @default(uuid())
  travelLogId Int
  userId      Int       // Changed from commenter string to userId reference
  parentId    String?   // null for top-level comments
  text        String
  createdAt   DateTime  @default(now())
  time        DateTime  @default(now())

  parent      Comment?  @relation("Replies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Comment[] @relation("Replies")
  
  travelLog   TravelLog @relation(fields: [travelLogId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reaction {
  id          String    @id @default(uuid())
  travelLogId Int
  userId      Int       // Changed from reactor string to userId reference
  type        String    
  createdAt   DateTime  @default(now())
  
  travelLog   TravelLog @relation(fields: [travelLogId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([travelLogId, userId]) // Updated to use userId instead of reactor
}

model Friendship {
  id        Int      @id @default(autoincrement())
  user1Id   Int
  user2Id   Int
  status    String   @default("pending") // "pending" or "accepted"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user1     User     @relation("SentFriendRequests", fields: [user1Id], references: [id], onDelete: Cascade)
  user2     User     @relation("ReceivedFriendRequests", fields: [user2Id], references: [id], onDelete: Cascade)
  
  @@unique([user1Id, user2Id])
}

model PendingVerification {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  otp        String
  otpExpiry  DateTime
  createdAt  DateTime @default(now())
}