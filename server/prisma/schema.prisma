generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  travellog TravelLog[]

}



model TravelLog {
  id          Int      @id @default(autoincrement())
  userId      Int
  yearVisited Int
  story       String   @db.Text // Long text for the travel story
  image       String   // URL or image path (image stored in supabase bucket gives a link)
  survivalChances Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

   comments        Comment[]
   reaction      Reaction[]
}

model Comment {
  id          String    @id @default(uuid())
  travelLogId Int
  parentId    String?   // null for top-level comments
  text        String
  commenter   String
  createdAt   DateTime  @default(now())
  time        DateTime  @default(now())

  parent      Comment?  @relation("Replies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Comment[] @relation("Replies")
  
  travelLog   TravelLog @relation(fields: [travelLogId], references: [id], onDelete: Cascade)
}

model Reaction {
  id          String    @id @default(uuid())
  travelLogId Int
  type        String    
  reactor     String    // Remove the @default("Anonymous")
  createdAt   DateTime  @default(now())
  
  travelLog   TravelLog @relation(fields: [travelLogId], references: [id], onDelete: Cascade)
  
  @@unique([travelLogId, reactor]) // Change unique constraint to prevent multiple reactions from same user
}

